version: 2.1

orbs:
  cypress: cypress-io/cypress@5.0.1

anchors-definitions:
  - always: &always
      only: /.*/
  - never: &never
      ignore: /.*/
  - pre-release-tag: &pre-release-tag
      only: /^v\d+\.\d+\.\d+\-pre$/
  - release-tag: &release-tag
      only: /^v\d+\.\d+\.\d+$/
  - pre-release-and-release-tag: &pre-release-and-release-tag
      only: /^v\d+\.\d+\.\d+(\-pre)?$/
  - filter-just-on-pre-release: &filter-just-on-pre-release
      filters:
        tags: *pre-release-tag
        branches: *never
  - filter-also-on-pre-release: &filter-also-on-pre-release
      filters:
        tags: *pre-release-tag
  - filter-just-on-release: &filter-just-on-release
      filters:
        tags: *release-tag
        branches: *never
  - filter-also-on-pre-release-and-release: &filter-also-on-pre-release-and-release
      filters:
        tags: *pre-release-and-release-tag

jobs:
  prepare:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - run:
          name: Npm install - root
          command: npm ci
      - run:
          name: Npm install - generate_results
          command: |
            cd generate_results
            npm ci
      - run:
          name: Npm install - frontend
          command: |
            cd frontend
            npm ci
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
  
  unit-tests:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Unit tests - generate_results
          command: |
            cd generate_results
            npm run test-ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ../reports/
            JEST_JUNIT_OUTPUT_NAME: generate-results-unit.xml
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: "true"
      - run:
          name: Integration tests - generate_results
          command: |
            cd generate_results
            npm run functional-test-ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ../reports/
            JEST_JUNIT_OUTPUT_NAME: generate-results-integration.xml
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: "true"
      - run:
          name: Unit tests - frontend
          command: |
            cd frontend
            npm run test-ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ../reports/
            JEST_JUNIT_OUTPUT_NAME: frontend-unit.xml
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: "true"
      - store_test_results:
          path: ./reports/

  deploy-preparation:
    docker:
      - image: cimg/node:lts # Maybe try lighter image
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Extract new release tag and version
          command: |
            RELEASE_TAG=$(echo "$CIRCLE_TAG" | perl -wne '/^(.*)\-pre$/i and print $1')
            echo $RELEASE_TAG > RELEASE_TAG.txt
            echo "RELEASE_TAG: $RELEASE_TAG"
            RELEASE_VERSION=$(echo "$RELEASE_TAG" | perl -wne '/^v(\d+\.\d+\.\d+)$/i and print $1')
            echo $RELEASE_VERSION > RELEASE_VERSION.txt
            echo "RELEASE_VERSION: $RELEASE_VERSION"
      - run:
          name: Point to main branch
          command: git checkout main # TODO maybe try and use whatever branch a tag is on
      - run:
          name: Npm audit - generate_results
          command: cd generate_results && npm audit
      - run:
          name: Npm audit - frontend
          command: cd frontend && npm audit
      - run:
          name: Update version in document files
          command: |
            RELEASE_VERSION=$(<RELEASE_VERSION.txt)
            npm run update-docs $RELEASE_VERSION
      - run:
          name: Update version in package files
          command: |
            RELEASE_TAG=$(<RELEASE_TAG.txt)
            RELEASE_VERSION=$(<RELEASE_VERSION.txt)
            chmod a+x ./update_package_json_version.sh
            ./update_package_json_version.sh ./package.json $RELEASE_VERSION
            ./update_package_json_version.sh ./generate_results/package.json $RELEASE_VERSION
            ./update_package_json_version.sh ./frontend/package.json $RELEASE_VERSION
      - run:
          name: Commit new version
          command: |
            git config user.email "sambuccid@gmail.com"
            git config user.name "CircleCI Deploy"
            git add package.json
            git add generate_results/package.json
            git add frontend/package.json
            git add \*.md
            git commit -m "Automatic update of package version from CircleCI [skip ci]"
            git push
      # TODO re-introduce the step, maybe circleci issue with "config file could not be located" has been resolved
      #- run:
      #    name: Git Tag Release
      #    command: |
      #      RELEASE_TAG=$(<RELEASE_TAG.txt)
      #      RELEASE_VERSION=$(<RELEASE_VERSION.txt)
      #      git tag -a $RELEASE_TAG -m "Release version $RELEASE_VERSION"
      #      git push --tags
      
  deploy:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Copy readmes to npm packages
          command: |
            cp README.md generate_results/README.md
            cp README.md frontend/README.md
      - run:
          name: Build - frontend
          command: |
            cd frontend
            npm run build
      - run:
          name: Fetch npm token
          command: npm set "//registry.npmjs.org/:_authToken=$NPM_TOKEN"
      - run:
          name: Publish - generate_results
          command: |
            cd generate_results
            npm publish
      - run:
          name: Publish - frontend
          command: |
            cd frontend
            npm publish

workflows:
  workflow:
    jobs:
      - prepare:
          <<: *filter-also-on-pre-release-and-release
      - unit-tests:
          requires:
            - prepare
          <<: *filter-also-on-pre-release
      - cypress/run: # "run" job comes from "cypress" orb
          requires:
            - unit-tests
          # TODO start-command: 'npm run start-application'
          <<: *filter-also-on-pre-release
      - deploy-preparation:
          requires:
            - cypress/run
          <<: *filter-just-on-pre-release
      - deploy:
          requires:
            - prepare
          <<: *filter-just-on-release
